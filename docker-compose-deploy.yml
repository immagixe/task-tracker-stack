version: '3.8'

services:
  app-backend:
    image: 'immagixe/task-tracker-backend:1.0'
    restart: on-failure
    container_name: app-backend
    env_file: ./.env
    ports:
      - "8080:8080"
    links:
      - redis
    depends_on:
      - db
      - redis
      - rabbitmq
      - app-scheduler
    environment:
      - SPRING_PROFILES_ACTIVE=docker-compose

  app-email-sender:
    image: 'immagixe/task-tracker-email-sender:1.0'
    restart: on-failure
    container_name: app-email-sender
    env_file: ./.env
    depends_on:
      - db
      - redis
      - rabbitmq
    environment:
      - SPRING_PROFILES_ACTIVE=docker-compose
      - SPRING_MAIL_PROTOCOL=${SPRING_MAIL_PROTOCOL}
      - SPRING_MAIL_HOST=${SPRING_MAIL_HOST}
      - SPRING_MAIL_PORT=${SPRING_MAIL_PORT}
      - SPRING_MAIL_USERNAME=${SPRING_MAIL_USERNAME}
      - SPRING_MAIL_PASSWORD=${SPRING_MAIL_PASSWORD}
      - SENDER_ADDRESS=${SENDER_ADDRESS}

  app-scheduler:
    image: 'immagixe/task-tracker-scheduler:1.0'
    restart: on-failure
    container_name: app-scheduler
    env_file: ./.env
    depends_on:
      - db
      - redis
      - rabbitmq
      - app-email-sender
    environment:
      - SPRING_PROFILES_ACTIVE=docker-compose

  db:
    image: 'postgres:13.1-alpine'
    container_name: db
    environment:
      - POSTGRES_USER=compose-postgres
      - POSTGRES_PASSWORD=compose-postgres
    volumes:
      - db_storage:/var/lib/postgresql/data

  redis:
    hostname: redis
    restart: always
    container_name: redis
    image: 'redis'
    ports:
      - "6379:6379"
    volumes:
      - redis_storage:/data

  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:3-management
    ports:
      # The standard AMQP protocol port
      - "5672:5672"
      # HTTP management UI
      - "15672:15672"
    environment:
      # The location of the RabbitMQ server.  amqp is the protocol;
      # rabbitmq is the hostname.  Note that there is not a guarantee
      # that the server will start first!  Telling the pika client library
      # to try multiple times gets around this ordering issue.
      AMQP_URL: "amqp://rabbitmq?connection_attempts=5&retry_delay=5"
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
volumes:
    db_storage:
    redis_storage: